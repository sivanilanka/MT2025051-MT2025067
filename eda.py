# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kMfZTv4evBzJT3du36TZ8u1Oyxl_8yD8
"""

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

df = pd.read_csv('train.csv')
print("train.csv loaded successfully.")

# Initial Data Inspection
print("\n Data Info & Types")
df.info()
print("\n\n Descriptive Statistics")
# stats for numeric columns
print(df.describe())
print("\n\n Value Counts")
# counts for categorical columns
categorical_cols = df.select_dtypes(include=['object', 'category']).columns
for col in categorical_cols:
    print(f"\nValue counts for '{col}':")
    print(df[col].value_counts())

sns.set_theme(style="whitegrid")

# Plot 1: Target Variable Distribution
print("\n Generating Plots")
plt.figure(figsize=(12, 7))
sns.countplot(data=df, y='WeightCategory', order=df['WeightCategory'].value_counts().index, palette='viridis')
plt.title('Distribution of Target Variable (WeightCategory)', fontsize=16)
plt.xlabel('Count', fontsize=12)
plt.ylabel('Weight Category', fontsize=12)
plt.tight_layout()
plt.savefig('target_distribution.png')
print("Saved: target_distribution.png")

# Plot 2: Engineer and Plot BMI
df['BMI'] = df['Weight'] / (df['Height'] ** 2)

plt.figure(figsize=(12, 7))

bmi_order = ['Insufficient_Weight', 'Normal_Weight', 'Overweight_Level_I', 'Overweight_Level_II',
             'Obesity_Type_I', 'Obesity_Type_II', 'Obesity_Type_III']
sns.boxplot(data=df, x='WeightCategory', y='BMI', order=bmi_order, palette='coolwarm')
plt.title('BMI Distribution by Weight Category', fontsize=16)
plt.xlabel('Weight Category', fontsize=12)
plt.ylabel('Body Mass Index (BMI)', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('bmi_vs_target.png')
print("Saved: bmi_vs_target.png")

# Plot 3: Age vs Target
plt.figure(figsize=(12, 7))
sns.boxplot(data=df, x='WeightCategory', y='Age', order=bmi_order, palette='coolwarm')
plt.title('Age Distribution by Weight Category', fontsize=16)
plt.xlabel('Weight Category', fontsize=12)
plt.ylabel('Age', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('age_vs_target.png')
print("Saved: age_vs_target.png")

# Plot 4: Correlation Heatmap
plt.figure(figsize=(14, 10))
numeric_df = df.select_dtypes(include=[np.number]).drop('id', axis=1, errors='ignore')
for col in ['FCVC', 'NCP', 'CH2O', 'FAF', 'TUE']:
    if col in numeric_df.columns:
        numeric_df[col] = np.round(numeric_df[col])

corr_matrix = numeric_df.corr()
sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap of Numeric Features ', fontsize=16)
plt.tight_layout()
plt.savefig('correlation_heatmap.png')
print("Saved: correlation_heatmap.png")

# Plot 5: Weight vs Height
plt.figure(figsize=(12, 7))
sns.scatterplot(data=df, x='Height', y='Weight', hue='WeightCategory', palette='viridis', alpha=0.7)
plt.title('Weight vs. Height (Colored by Weight Category)', fontsize=16)
plt.xlabel('Height', fontsize=12)
plt.ylabel('Weight', fontsize=12)
plt.legend(title='Weight Category', bbox_to_anchor=(1.05, 1), loc=2)
plt.tight_layout()
plt.savefig('weight_vs_height.png')
print("Saved: weight_vs_height.png")